// <auto-generated />
using System;
using ConnectedCommunity.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ConnectedCommunity.Model.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20180618133453_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ConnectedCommunity.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("GroupMemberId")
                        .HasColumnName("group_member_id");

                    b.Property<bool>("Hidden")
                        .HasColumnName("hidden");

                    b.Property<int>("MemberId")
                        .HasColumnName("member_id");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<int>("PostId")
                        .HasColumnName("post_id");

                    b.Property<bool>("Private")
                        .HasColumnName("private");

                    b.HasKey("Id");

                    b.HasIndex("GroupMemberId");

                    b.HasIndex("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("ConnectedCommunity.Model.CommentMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CommentId")
                        .HasColumnName("comment_id");

                    b.Property<string>("Media")
                        .HasColumnName("media");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("Id");

                    b.ToTable("comment_media");
                });

            modelBuilder.Entity("ConnectedCommunity.Model.CommentVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CommentId")
                        .HasColumnName("comment_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<int>("GroupMemberId")
                        .HasColumnName("group_member_id");

                    b.Property<int>("MemberId")
                        .HasColumnName("member_id");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("GroupMemberId");

                    b.ToTable("comment_votes");
                });

            modelBuilder.Entity("ConnectedCommunity.Model.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnName("school_name");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("SchoolId")
                        .IsUnique();

                    b.ToTable("communities");
                });

            modelBuilder.Entity("ConnectedCommunity.Model.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<int>("CommunityId")
                        .HasColumnName("community_id");

                    b.Property<int?>("CreatorId")
                        .HasColumnName("creator_id");

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnName("date_archived");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("Membership")
                        .HasColumnName("membership");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DateArchived");

                    b.HasIndex("Id");

                    b.HasIndex("Membership");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("ConnectedCommunity.Model.GroupInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id");

                    b.Property<int>("MemberId")
                        .HasColumnName("member_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId");

                    b.ToTable("group_invites");
                });

            modelBuilder.Entity("ConnectedCommunity.Model.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<bool>("Admin")
                        .HasColumnName("admin");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id");

                    b.Property<int>("MemberId")
                        .HasColumnName("member_id");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("GroupId");

                    b.HasIndex("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("group_members");
                });

            modelBuilder.Entity("ConnectedCommunity.Model.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<bool>("Admin")
                        .HasColumnName("admin");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias");

                    b.Property<int>("CommunityId")
                        .HasColumnName("community_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("CommunityId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("members");
                });

            modelBuilder.Entity("ConnectedCommunity.Model.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnName("content");

                    b.Property<DateTime?>("DateArchived")
                        .HasColumnName("date_archived");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified");

                    b.Property<int>("GroupId")
                        .HasColumnName("group_id");

                    b.Property<int>("GroupMemberId")
                        .HasColumnName("group_member_id");

                    b.Property<int>("MemberId")
                        .HasColumnName("member_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("DateArchived");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupMemberId");

                    b.HasIndex("Id");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("ConnectedCommunity.Model.PostMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Media")
                        .HasColumnName("media");

                    b.Property<int>("PostId")
                        .HasColumnName("post_id");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PostId");

                    b.ToTable("post_media");
                });

            modelBuilder.Entity("ConnectedCommunity.Model.Comment", b =>
                {
                    b.HasOne("ConnectedCommunity.Model.GroupMember", "GroupMember")
                        .WithMany("Comments")
                        .HasForeignKey("GroupMemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConnectedCommunity.Model.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("ConnectedCommunity.Model.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConnectedCommunity.Model.CommentMedia", b =>
                {
                    b.HasOne("ConnectedCommunity.Model.Comment", "Comment")
                        .WithMany("Media")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConnectedCommunity.Model.CommentVote", b =>
                {
                    b.HasOne("ConnectedCommunity.Model.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConnectedCommunity.Model.GroupMember", "GroupMember")
                        .WithMany()
                        .HasForeignKey("GroupMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConnectedCommunity.Model.Group", b =>
                {
                    b.HasOne("ConnectedCommunity.Model.Community", "Community")
                        .WithMany("Groups")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConnectedCommunity.Model.Member", "Member")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("ConnectedCommunity.Model.GroupInvite", b =>
                {
                    b.HasOne("ConnectedCommunity.Model.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConnectedCommunity.Model.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConnectedCommunity.Model.GroupMember", b =>
                {
                    b.HasOne("ConnectedCommunity.Model.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConnectedCommunity.Model.Member", "Member")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConnectedCommunity.Model.Member", b =>
                {
                    b.HasOne("ConnectedCommunity.Model.Community", "Community")
                        .WithMany("Members")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConnectedCommunity.Model.Post", b =>
                {
                    b.HasOne("ConnectedCommunity.Model.Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConnectedCommunity.Model.GroupMember", "GroupMember")
                        .WithMany("Posts")
                        .HasForeignKey("GroupMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ConnectedCommunity.Model.PostMedia", b =>
                {
                    b.HasOne("ConnectedCommunity.Model.Post", "Post")
                        .WithMany("Media")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
